{"version":3,"sources":["components/NewTaskForm.tsx","components/TaskListItem.tsx","components/TaskList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NewTaskForm","onChange","onAdd","task","onSubmit","value","name","type","TaskListItem","onDelete","onClick","TaskList","tasks","map","App","state","newTask","id","addTask","event","preventDefault","setState","previousState","handleTaskChange","target","deleteTask","taskToDelete","filter","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAUaA,EAAwC,SAAC,GAAD,IACnDC,EADmD,EACnDA,SACAC,EAFmD,EAEnDA,MACAC,EAHmD,EAGnDA,KAHmD,OAKnD,0BAAMC,SAAUF,GACd,2BAAOD,SAAUA,EAAUI,MAAOF,EAAKG,OACvC,4BAAQC,KAAK,UAAb,gBCRSC,EAAyC,SAAC,GAAwB,IAAtBL,EAAqB,EAArBA,KAAMM,EAAe,EAAfA,SAK7D,OACE,4BACGN,EAAKG,KADR,IACc,4BAAQI,QANR,WACdD,EAASN,KAKK,YCNLQ,EAAqC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOH,EAAV,EAAUA,SAAV,OAChD,4BACGG,EAAMC,KAAI,SAAAV,GAAI,OACb,kBAAC,EAAD,CAAcA,KAAMA,EAAMM,SAAUA,S,6jBCmD3BK,E,2MApDbC,MAAQ,CACNC,QAAS,CACPC,GAAI,EACJX,KAAM,IAERM,MAAO,I,EAGDM,QAAU,SAACC,GACjBA,EAAMC,iBAEN,EAAKC,UAAS,SAAAC,GAAa,MAAK,CAC9BN,QAAS,CACPC,GAAIK,EAAcN,QAAQC,GAAK,EAC/BX,KAAM,IAERM,MAAM,GAAD,mBAAMU,EAAcV,OAApB,CAA2BU,EAAcN,e,EAI1CO,iBAAmB,SAACJ,GAC1B,EAAKE,SAAS,CACZL,QAAQ,EAAD,GACF,EAAKD,MAAMC,QADT,CAELV,KAAMa,EAAMK,OAAOnB,W,EAKjBoB,WAAa,SAACC,GACpB,EAAKL,UAAS,SAAAC,GAAa,MAAK,CAC9BV,MAAM,YACDU,EAAcV,MAAMe,QAAO,SAAAxB,GAAI,OAAIA,EAAKc,KAAOS,EAAaT,Y,wEAMnE,OACE,6BACE,+CACA,kBAAC,EAAD,CACEd,KAAMyB,KAAKb,MAAMC,QACjBd,MAAO0B,KAAKV,QACZjB,SAAU2B,KAAKL,mBAEjB,kBAAC,EAAD,CAAUX,MAAOgB,KAAKb,MAAMH,MAAOH,SAAUmB,KAAKH,kB,GA/CxCI,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0f1f517f.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport { Task } from \"../models/task\";\n\n// TODO: annotate event types properly\ninterface Props {\n  onChange: (event: any) => void;\n  onAdd: (event: any) => void;\n  task: Task;\n}\n\nexport const NewTaskForm: FunctionComponent<Props> = ({\n  onChange,\n  onAdd,\n  task\n}) => (\n  <form onSubmit={onAdd}>\n    <input onChange={onChange} value={task.name} />\n    <button type=\"submit\">Add a task</button>\n  </form>\n);\n","import React, { FunctionComponent } from \"react\";\n\nimport { Task } from \"../models/task\";\n\ninterface Props {\n  task: Task;\n  onDelete: (task: Task) => void;\n}\n\nexport const TaskListItem: FunctionComponent<Props> = ({ task, onDelete }) => {\n  const onClick = () => {\n    onDelete(task);\n  };\n\n  return (\n    <li>\n      {task.name} <button onClick={onClick}>Delete</button>\n    </li>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\n\nimport { Task } from \"../models/task\";\nimport { TaskListItem } from \"./TaskListItem\";\n\ninterface Props {\n  tasks: Task[];\n  onDelete: (tasks: Task) => void;\n}\n\nexport const TaskList: FunctionComponent<Props> = ({ tasks, onDelete }) => (\n  <ul>\n    {tasks.map(task => (\n      <TaskListItem task={task} onDelete={onDelete} />\n    ))}\n  </ul>\n);\n","import React, { Component } from \"react\";\n\nimport { Task } from \"./models/task\";\nimport { NewTaskForm } from \"./components/NewTaskForm\";\nimport { TaskList } from \"./components/TaskList\";\n\ninterface State {\n  newTask: Task;\n  tasks: Task[];\n}\n\nclass App extends Component<{}, State> {\n  state = {\n    newTask: {\n      id: 1,\n      name: \"\"\n    },\n    tasks: []\n  };\n\n  private addTask = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    this.setState(previousState => ({\n      newTask: {\n        id: previousState.newTask.id + 1,\n        name: \"\"\n      },\n      tasks: [...previousState.tasks, previousState.newTask]\n    }));\n  };\n\n  private handleTaskChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      newTask: {\n        ...this.state.newTask,\n        name: event.target.value\n      }\n    });\n  };\n\n  private deleteTask = (taskToDelete: Task) => {\n    this.setState(previousState => ({\n      tasks: [\n        ...previousState.tasks.filter(task => task.id !== taskToDelete.id)\n      ]\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>Hello React TS!</h2>\n        <NewTaskForm\n          task={this.state.newTask}\n          onAdd={this.addTask}\n          onChange={this.handleTaskChange}\n        />\n        <TaskList tasks={this.state.tasks} onDelete={this.deleteTask} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}